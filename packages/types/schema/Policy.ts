/*
 * This file is automatically generated by typespec-typescript-emitter.
 *
 * You should not change or manipulate this file, as it will be overwritten.
 * Instead, change the underlying spec.
 */

export enum ModuleRecordType {
  builtin,
  native,
  js,
}

export interface PackageResourcePolicy {
  builtin?: { [k: string]: boolean }
  package?: { [k: string]: boolean }
  global?: { [k: string]: 'read' | 'write' | boolean }
}

export interface LavaMoatPolicy {
  resources?: {
    [k: string]: {
      builtin?: { [k: string]: boolean }
      package?: { [k: string]: boolean }
      global?: { [k: string]: 'read' | 'write' | boolean }
    }
  }
  resolutions?: { [k: string]: { [k: string]: string } }
}

export interface LavaMoatPolicyDebug {
  debugInfo: {
    [k: string]: {
      parseErrors?: {
        code: string
        reasonCode: string
      }[]
      moduleRecord: {
        /** Module specifier */
        specifier: string
        /**
         * Path to module file.
         *
         * If a builtin, this is the same as `specifier`
         */
        file: string
        /** Module type */
        type: ModuleRecordType
        /**
         * Package name
         *
         * If a builtin, this is the same as `specifier`
         */
        packageName: string
        /** Content of the module file (raw source code) */
        content?: string
        /** Import map */
        importMap: { [k: string]: string }
      }
      sesCompat: {
        dynamicRequires: {
          node: {
            loc: {
              start: {
                column: number
                index: number
                line: number
              }
              end: {
                column: number
                index: number
                line: number
              }
            }
          }
        }[]
        primordialMutations: {
          node: {
            loc: {
              start: {
                column: number
                index: number
                line: number
              }
              end: {
                column: number
                index: number
                line: number
              }
            }
          }
        }[]
        strictModeViolations: {
          node: {
            loc: {
              start: {
                column: number
                index: number
                line: number
              }
              end: {
                column: number
                index: number
                line: number
              }
            }
          }
        }[]
      }
      globals: { [k: string]: boolean }
      builtin: string[]
    }
  }
}

export interface DebugInfo {
  parseErrors?: {
    code: string
    reasonCode: string
  }[]
  moduleRecord: {
    /** Module specifier */
    specifier: string
    /**
     * Path to module file.
     *
     * If a builtin, this is the same as `specifier`
     */
    file: string
    /** Module type */
    type: ModuleRecordType
    /**
     * Package name
     *
     * If a builtin, this is the same as `specifier`
     */
    packageName: string
    /** Content of the module file (raw source code) */
    content?: string
    /** Import map */
    importMap: { [k: string]: string }
  }
  sesCompat: {
    dynamicRequires: {
      node: {
        loc: {
          start: {
            column: number
            index: number
            line: number
          }
          end: {
            column: number
            index: number
            line: number
          }
        }
      }
    }[]
    primordialMutations: {
      node: {
        loc: {
          start: {
            column: number
            index: number
            line: number
          }
          end: {
            column: number
            index: number
            line: number
          }
        }
      }
    }[]
    strictModeViolations: {
      node: {
        loc: {
          start: {
            column: number
            index: number
            line: number
          }
          end: {
            column: number
            index: number
            line: number
          }
        }
      }
    }[]
  }
  globals: { [k: string]: boolean }
  builtin: string[]
}

export interface ParseError {
  code: string
  reasonCode: string
}

export interface LavaMoatModuleRecord {
  /** Module specifier */
  specifier: string
  /**
   * Path to module file.
   *
   * If a builtin, this is the same as `specifier`
   */
  file: string
  /** Module type */
  type: ModuleRecordType
  /**
   * Package name
   *
   * If a builtin, this is the same as `specifier`
   */
  packageName: string
  /** Content of the module file (raw source code) */
  content?: string
  /** Import map */
  importMap: { [k: string]: string }
}

export interface SesCompat {
  dynamicRequires: {
    node: {
      loc: {
        start: {
          column: number
          index: number
          line: number
        }
        end: {
          column: number
          index: number
          line: number
        }
      }
    }
  }[]
  primordialMutations: {
    node: {
      loc: {
        start: {
          column: number
          index: number
          line: number
        }
        end: {
          column: number
          index: number
          line: number
        }
      }
    }
  }[]
  strictModeViolations: {
    node: {
      loc: {
        start: {
          column: number
          index: number
          line: number
        }
        end: {
          column: number
          index: number
          line: number
        }
      }
    }
  }[]
}

export interface SesCompatObj {
  node: {
    loc: {
      start: {
        column: number
        index: number
        line: number
      }
      end: {
        column: number
        index: number
        line: number
      }
    }
  }
}

export interface SesCompatNode {
  loc: {
    start: {
      column: number
      index: number
      line: number
    }
    end: {
      column: number
      index: number
      line: number
    }
  }
}

export interface SesCompatNodeLocation {
  start: {
    column: number
    index: number
    line: number
  }
  end: {
    column: number
    index: number
    line: number
  }
}

export interface NodeLocation {
  column: number
  index: number
  line: number
}
