import defaultAsName from './module-exports-assigned-object.cjs';
import * as namespaceAsName from './module-exports-assigned-object.cjs';
// import { name } from './module-exports-assigned-object.cjs'; // Not expected to work, does not work on Node.js

import explicitDefault from './set-explicit-default.cjs';
import * as namespaceExplicitDefault from './set-explicit-default.cjs';

import './require-no-implicit-default.cjs';

// Whenever you expand or modify the assertions here, check if they remain
// compatible with Node.js by running:
// node test/fixtures-0/node_modules/esmcjs/index.mjs
// There should be no errors in the output.

if (defaultAsName.name !== 42) {
  throw new Error(
    `Assigning to module exports should be equivalent to exporting a default`,
  );
}
if (namespaceAsName.default.name !== 42) {
  throw new Error(
    `Assigning to module exports should be equivalent to exporting a default on the namespace object`,
  );
}
if (namespaceAsName.name === undefined) {
  throw new Error(
    `Assigning to module exports should propagate fields to the namespace object`,
  );
}

if (explicitDefault === 2) {
  throw new Error(
    `Explicit default field in export should not override default export`,
  );
}
if (explicitDefault.default !== 2) {
  throw new Error(
    `Explicit default field in export should be present as a field on the default imported in mjs. Got ${explicitDefault.default}`,
  );
}

const keys = Object.keys(namespaceExplicitDefault)
  .sort()
  .join();
if (keys !== 'default,notDefault') {
  throw new Error(
    `Expected import * to find 'default,notDefault', got ${keys}`,
  );
}
