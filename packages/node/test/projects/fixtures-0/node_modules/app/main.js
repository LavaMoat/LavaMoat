/* global globalProperty */

import 'esmcjs'

import typecommon from 'typecommon'
import typemodule from 'typemodule'
// import typemoduleImplied from 'typemodule-implied'
import typeparsers from 'typeparsers'

export { typecommon, typemodule, typeparsers }

export { avery } from 'avery'
// My (kriskowal) theory is that the brooke module isn't resolvable because the
// linter isn't aware of package.json's main property and seems to hope that
// brooke/index.js stands in for it.
// eslint-disable-next-line import/no-unresolved
export { brooke } from 'brooke'
export { clarke } from 'clarke'
export { danny } from 'danny'

// The builtin export does not resolve because it does not exist on disk and is
// a figment of testing machinations.
// eslint-disable-next-line import/no-unresolved
export { builtin } from 'builtin'

export const receivedGlobalProperty = globalProperty

export const importMetaUrl = import.meta.url

if (!Object.isFrozen(globalThis)) {
  throw new Error('The global object must be frozen in all compartments')
}

// reflexivity
import * as app from 'app'
import * as appMain from 'app/main.js'
if (app !== appMain) {
  throw new Error(
    'Import aliases for the reflexive module name should produce identical namespace objects'
  )
}
