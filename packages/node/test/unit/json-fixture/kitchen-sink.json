{
  "/package.json": "{\n  \"name\": \"main\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"description\": \"\",\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"keywords\": [],\n  \"scripts\": {\n    \"install\": \"echo \\\"Do not run npm install in this package\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"app\": \"1.0.0\"\n  }\n}\n",
  "/index.js": "import * as App from 'app'\n\nexport const hello = 'world'\nexport { App }\n",
  "/node_modules/ignored/package.json": "{\n  \"name\": \"ignored\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/ignored/README.md": "This package should not appear in the compartment map.\n",
  "/node_modules/ignored/index.js": "export const ignored = true\n",
  "/node_modules/edwin/README.md": "This package is exported from `avery`, except via a relative filepath instead of a bare specifier.\n",
  "/node_modules/edwin/package.json": "{\n  \"name\": \"edwin\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./index.js\",\n  \"type\": \"module\",\n  \"parsers\": {\n    \"js\": \"mjs\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/edwin/index.js": "export const edwin = ['Eddie', 'Ed'];\n",
  "/node_modules/danny/package.json": "{\n  \"name\": \"danny\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./src/index.js\",\n  \"type\": \"module\",\n  \"parsers\": {\n    \"js\": \"mjs\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/danny/README.md": "This package covers the referrer module specifier for a module that has been\nredirected to the \"index.js\" file within a module named for the containing\ndirectory, specifically that it can import adjacent modules within that\ndirectory.\n",
  "/node_modules/danny/src/index.js": "export * from 'danny/src/danny.js';\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n",
  "/node_modules/danny/src/danny.js": "export const danny = 'Danny';\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n",
  "/node_modules/clarke/package.json": "{\n  \"name\": \"clarke\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Clarke implicitly exports an index ESM.\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/clarke/index.js": "export const clarke = 'Clarke';\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n",
  "/node_modules/clarke/README.md": "This package covers the ability to import any module within this package even\nthough no modules are explcitly mentioned in an \"exports\" directive in\npackage.json.\n",
  "/node_modules/cjs/package.json": "{\n  \"name\": \"cjs\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"clarke\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/cjs/index.js": "require('clarke')\n\nmodule.exports = {\n  cjs: true\n}\n",
  "/node_modules/cjs/README.md": "This package is a CJS module.\n",
  "/node_modules/cjs/node_modules/clarke/package.json": "{\n  \"name\": \"clarke\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Like the other Clarke, but it is CJS\",\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/cjs/node_modules/clarke/README.md": "This package is the same name and version as another, but it is CJS instead of ESM.\n",
  "/node_modules/cjs/node_modules/clarke/index.js": "exports.clarke = 'Clarke';\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n",
  "/node_modules/brooke/package.json": "{\n  \"name\": \"brooke\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Brooke uses `exports` to reveal its main ESM.\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./brooke.js\"\n  },\n  \"peerDependencies\": {\n    \"clarke\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/brooke/brooke.js": "import { clarke } from 'clarke';\n\nexport const brooke = 'Brooke';\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n",
  "/node_modules/brooke/README.md": "This package covers use of the \"exports\" directive to mark a single public\nmodule interface.\n",
  "/node_modules/avery/README.md": "This package covers use of a \"main\" directive in combination with the \"type\":\n\"module\" directive to name the module that represents the package as a whole.\n\n",
  "/node_modules/avery/package.json": "{\n  \"name\": \"avery\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Avery exports a `main` ESM.\",\n  \"type\": \"module\",\n  \"main\": \"./avery.js\",\n  \"dependencies\": {\n    \"edwin\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/avery/avery.js": "export const avery = 'Avery';\nexport { edwin } from '../edwin';\n",
  "/node_modules/app/package.json": "{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"./main.js\",\n  \"dependencies\": {\n    \"avery\": \"^1.0.0\",\n    \"brooke\": \"^1.0.0\",\n    \"clarke\": \"^1.0.0\",\n    \"danny\": \"^1.0.0\",\n    \"ignored\": \"^1.0.0\",\n    \"cjs\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"preinstall\": \"echo DO NOT INSTALL TEST FIXTURES; exit -1\"\n  }\n}\n",
  "/node_modules/app/main.js": "/* global globalProperty */\n\nexport { avery } from 'avery';\n// My (kriskowal) theory is that the brooke module isn't resolvable because the\n// linter isn't aware of package.json's main property and seems to hope that\n// brooke/index.js stands in for it.\n// eslint-disable-next-line import/no-unresolved\nexport { brooke } from 'brooke';\nexport { clarke } from 'clarke';\nexport { danny } from 'danny';\n\nexport const receivedGlobalProperty = globalProperty;\n\nexport const importMetaUrl = import.meta.url;\n\nif (!Object.isFrozen(globalThis)) {\n  throw new Error('The global object must be frozen in all compartments');\n}\n\n// reflexivity\nimport * as app from 'app';\nimport * as appMain from 'app';\nif (app !== appMain) {\n  throw new Error(\n    'Import aliases for the reflexive module name should produce identical namespace objects',\n  );\n}\n\nimport cjs from 'cjs';\nexport const cjsValue = cjs.cjs;\n\n",
  "/node_modules/app/README.md": "This is the root application package for testing.\nThis package depends transitively upon other packages that exercise various\nscenarios.\nThe test scaffold uses this to confirm equivalent behavior for applications\nwhen run directly off the file system and from archives.\n"
}
