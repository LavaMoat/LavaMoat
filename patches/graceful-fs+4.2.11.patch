diff --git a/node_modules/graceful-fs/graceful-fs.js b/node_modules/graceful-fs/graceful-fs.js
index 8d5b89e..f6ed3a6 100644
--- a/node_modules/graceful-fs/graceful-fs.js
+++ b/node_modules/graceful-fs/graceful-fs.js
@@ -5,44 +5,25 @@ var clone = require('./clone.js')
 
 var util = require('util')
 
-/* istanbul ignore next - node 0.x polyfill */
-var gracefulQueue
-var previousSymbol
-
-/* istanbul ignore else - node 0.x polyfill */
-if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
-  gracefulQueue = Symbol.for('graceful-fs.queue')
-  // This is used in testing by future versions
-  previousSymbol = Symbol.for('graceful-fs.previous')
-} else {
-  gracefulQueue = '___graceful-fs.queue'
-  previousSymbol = '___graceful-fs.previous'
-}
-
-function noop () {}
+function noop() {}
 
 function publishQueue(context, queue) {
-  Object.defineProperty(context, gracefulQueue, {
-    get: function() {
-      return queue
-    }
-  })
+  context['___graceful-fs_queue'] = queue
 }
 
 var debug = noop
-if (util.debuglog)
-  debug = util.debuglog('gfs4')
+if (util.debuglog) debug = util.debuglog('gfs4')
 else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
-  debug = function() {
+  debug = function () {
     var m = util.format.apply(util, arguments)
     m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
     console.error(m)
   }
 
 // Once time initialization
-if (!fs[gracefulQueue]) {
+if (!fs['___graceful-fs_queue']) {
   // This queue can be shared by multiple loaded instances
-  var queue = global[gracefulQueue] || []
+  var queue = global['___graceful-fs_queue'] || []
   publishQueue(fs, queue)
 
   // Patch fs.close/closeSync to shared queue version, because we need
@@ -50,56 +31,55 @@ if (!fs[gracefulQueue]) {
   // This is essential when multiple graceful-fs instances are
   // in play at the same time.
   fs.close = (function (fs$close) {
-    function close (fd, cb) {
+    function close(fd, cb) {
       return fs$close.call(fs, fd, function (err) {
         // This function uses the graceful-fs shared queue
         if (!err) {
           resetQueue()
         }
 
-        if (typeof cb === 'function')
-          cb.apply(this, arguments)
+        if (typeof cb === 'function') cb.apply(this, arguments)
       })
     }
 
-    Object.defineProperty(close, previousSymbol, {
-      value: fs$close
+    Object.defineProperty(close, '___graceful-fs_previous', {
+      value: fs$close,
     })
     return close
   })(fs.close)
 
   fs.closeSync = (function (fs$closeSync) {
-    function closeSync (fd) {
+    function closeSync(fd) {
       // This function uses the graceful-fs shared queue
       fs$closeSync.apply(fs, arguments)
       resetQueue()
     }
 
-    Object.defineProperty(closeSync, previousSymbol, {
-      value: fs$closeSync
+    Object.defineProperty(closeSync, '___graceful-fs_previous', {
+      value: fs$closeSync,
     })
     return closeSync
   })(fs.closeSync)
 
   if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
-    process.on('exit', function() {
-      debug(fs[gracefulQueue])
-      require('assert').equal(fs[gracefulQueue].length, 0)
+    process.on('exit', function () {
+      debug(fs['___graceful-fs_queue'])
+      require('assert').equal(fs['___graceful-fs_queue'].length, 0)
     })
   }
 }
 
-if (!global[gracefulQueue]) {
-  publishQueue(global, fs[gracefulQueue]);
+if (!global['___graceful-fs_queue']) {
+  publishQueue(global, fs['___graceful-fs_queue'])
 }
 
 module.exports = patch(clone(fs))
 if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
-    module.exports = patch(fs)
-    fs.__patched = true;
+  module.exports = patch(fs)
+  fs.__patched = true
 }
 
-function patch (fs) {
+function patch(fs) {
   // Everything that references the open() function needs to be in here
   polyfills(fs)
   fs.gracefulify = patch
@@ -108,19 +88,23 @@ function patch (fs) {
   fs.createWriteStream = createWriteStream
   var fs$readFile = fs.readFile
   fs.readFile = readFile
-  function readFile (path, options, cb) {
-    if (typeof options === 'function')
-      cb = options, options = null
+  function readFile(path, options, cb) {
+    if (typeof options === 'function') (cb = options), (options = null)
 
     return go$readFile(path, options, cb)
 
-    function go$readFile (path, options, cb, startTime) {
+    function go$readFile(path, options, cb, startTime) {
       return fs$readFile(path, options, function (err) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
-          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])
+          enqueue([
+            go$readFile,
+            [path, options, cb],
+            err,
+            startTime || Date.now(),
+            Date.now(),
+          ])
         else {
-          if (typeof cb === 'function')
-            cb.apply(this, arguments)
+          if (typeof cb === 'function') cb.apply(this, arguments)
         }
       })
     }
@@ -128,62 +112,73 @@ function patch (fs) {
 
   var fs$writeFile = fs.writeFile
   fs.writeFile = writeFile
-  function writeFile (path, data, options, cb) {
-    if (typeof options === 'function')
-      cb = options, options = null
+  function writeFile(path, data, options, cb) {
+    if (typeof options === 'function') (cb = options), (options = null)
 
     return go$writeFile(path, data, options, cb)
 
-    function go$writeFile (path, data, options, cb, startTime) {
+    function go$writeFile(path, data, options, cb, startTime) {
       return fs$writeFile(path, data, options, function (err) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
-          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
+          enqueue([
+            go$writeFile,
+            [path, data, options, cb],
+            err,
+            startTime || Date.now(),
+            Date.now(),
+          ])
         else {
-          if (typeof cb === 'function')
-            cb.apply(this, arguments)
+          if (typeof cb === 'function') cb.apply(this, arguments)
         }
       })
     }
   }
 
   var fs$appendFile = fs.appendFile
-  if (fs$appendFile)
-    fs.appendFile = appendFile
-  function appendFile (path, data, options, cb) {
-    if (typeof options === 'function')
-      cb = options, options = null
+  if (fs$appendFile) fs.appendFile = appendFile
+  function appendFile(path, data, options, cb) {
+    if (typeof options === 'function') (cb = options), (options = null)
 
     return go$appendFile(path, data, options, cb)
 
-    function go$appendFile (path, data, options, cb, startTime) {
+    function go$appendFile(path, data, options, cb, startTime) {
       return fs$appendFile(path, data, options, function (err) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
-          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
+          enqueue([
+            go$appendFile,
+            [path, data, options, cb],
+            err,
+            startTime || Date.now(),
+            Date.now(),
+          ])
         else {
-          if (typeof cb === 'function')
-            cb.apply(this, arguments)
+          if (typeof cb === 'function') cb.apply(this, arguments)
         }
       })
     }
   }
 
   var fs$copyFile = fs.copyFile
-  if (fs$copyFile)
-    fs.copyFile = copyFile
-  function copyFile (src, dest, flags, cb) {
+  if (fs$copyFile) fs.copyFile = copyFile
+  function copyFile(src, dest, flags, cb) {
     if (typeof flags === 'function') {
       cb = flags
       flags = 0
     }
     return go$copyFile(src, dest, flags, cb)
 
-    function go$copyFile (src, dest, flags, cb, startTime) {
+    function go$copyFile(src, dest, flags, cb, startTime) {
       return fs$copyFile(src, dest, flags, function (err) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
-          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])
+          enqueue([
+            go$copyFile,
+            [src, dest, flags, cb],
+            err,
+            startTime || Date.now(),
+            Date.now(),
+          ])
         else {
-          if (typeof cb === 'function')
-            cb.apply(this, arguments)
+          if (typeof cb === 'function') cb.apply(this, arguments)
         }
       })
     }
@@ -192,25 +187,27 @@ function patch (fs) {
   var fs$readdir = fs.readdir
   fs.readdir = readdir
   var noReaddirOptionVersions = /^v[0-5]\./
-  function readdir (path, options, cb) {
-    if (typeof options === 'function')
-      cb = options, options = null
+  function readdir(path, options, cb) {
+    if (typeof options === 'function') (cb = options), (options = null)
 
     var go$readdir = noReaddirOptionVersions.test(process.version)
-      ? function go$readdir (path, options, cb, startTime) {
-        return fs$readdir(path, fs$readdirCallback(
-          path, options, cb, startTime
-        ))
-      }
-      : function go$readdir (path, options, cb, startTime) {
-        return fs$readdir(path, options, fs$readdirCallback(
-          path, options, cb, startTime
-        ))
-      }
+      ? function go$readdir(path, options, cb, startTime) {
+          return fs$readdir(
+            path,
+            fs$readdirCallback(path, options, cb, startTime)
+          )
+        }
+      : function go$readdir(path, options, cb, startTime) {
+          return fs$readdir(
+            path,
+            options,
+            fs$readdirCallback(path, options, cb, startTime)
+          )
+        }
 
     return go$readdir(path, options, cb)
 
-    function fs$readdirCallback (path, options, cb, startTime) {
+    function fs$readdirCallback(path, options, cb, startTime) {
       return function (err, files) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
           enqueue([
@@ -218,14 +215,12 @@ function patch (fs) {
             [path, options, cb],
             err,
             startTime || Date.now(),
-            Date.now()
+            Date.now(),
           ])
         else {
-          if (files && files.sort)
-            files.sort()
+          if (files && files.sort) files.sort()
 
-          if (typeof cb === 'function')
-            cb.call(this, err, files)
+          if (typeof cb === 'function') cb.call(this, err, files)
         }
       }
     }
@@ -257,7 +252,7 @@ function patch (fs) {
       ReadStream = val
     },
     enumerable: true,
-    configurable: true
+    configurable: true,
   })
   Object.defineProperty(fs, 'WriteStream', {
     get: function () {
@@ -267,7 +262,7 @@ function patch (fs) {
       WriteStream = val
     },
     enumerable: true,
-    configurable: true
+    configurable: true,
   })
 
   // legacy names
@@ -280,7 +275,7 @@ function patch (fs) {
       FileReadStream = val
     },
     enumerable: true,
-    configurable: true
+    configurable: true,
   })
   var FileWriteStream = WriteStream
   Object.defineProperty(fs, 'FileWriteStream', {
@@ -291,22 +286,20 @@ function patch (fs) {
       FileWriteStream = val
     },
     enumerable: true,
-    configurable: true
+    configurable: true,
   })
 
-  function ReadStream (path, options) {
+  function ReadStream(path, options) {
     if (this instanceof ReadStream)
       return fs$ReadStream.apply(this, arguments), this
-    else
-      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
+    else return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
   }
 
-  function ReadStream$open () {
+  function ReadStream$open() {
     var that = this
     open(that.path, that.flags, that.mode, function (err, fd) {
       if (err) {
-        if (that.autoClose)
-          that.destroy()
+        if (that.autoClose) that.destroy()
 
         that.emit('error', err)
       } else {
@@ -317,14 +310,14 @@ function patch (fs) {
     })
   }
 
-  function WriteStream (path, options) {
+  function WriteStream(path, options) {
     if (this instanceof WriteStream)
       return fs$WriteStream.apply(this, arguments), this
     else
       return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
   }
 
-  function WriteStream$open () {
+  function WriteStream$open() {
     var that = this
     open(that.path, that.flags, that.mode, function (err, fd) {
       if (err) {
@@ -337,29 +330,33 @@ function patch (fs) {
     })
   }
 
-  function createReadStream (path, options) {
+  function createReadStream(path, options) {
     return new fs.ReadStream(path, options)
   }
 
-  function createWriteStream (path, options) {
+  function createWriteStream(path, options) {
     return new fs.WriteStream(path, options)
   }
 
   var fs$open = fs.open
   fs.open = open
-  function open (path, flags, mode, cb) {
-    if (typeof mode === 'function')
-      cb = mode, mode = null
+  function open(path, flags, mode, cb) {
+    if (typeof mode === 'function') (cb = mode), (mode = null)
 
     return go$open(path, flags, mode, cb)
 
-    function go$open (path, flags, mode, cb, startTime) {
+    function go$open(path, flags, mode, cb, startTime) {
       return fs$open(path, flags, mode, function (err, fd) {
         if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
-          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])
+          enqueue([
+            go$open,
+            [path, flags, mode, cb],
+            err,
+            startTime || Date.now(),
+            Date.now(),
+          ])
         else {
-          if (typeof cb === 'function')
-            cb.apply(this, arguments)
+          if (typeof cb === 'function') cb.apply(this, arguments)
         }
       })
     }
@@ -368,9 +365,9 @@ function patch (fs) {
   return fs
 }
 
-function enqueue (elem) {
+function enqueue(elem) {
   debug('ENQUEUE', elem[0].name, elem[1])
-  fs[gracefulQueue].push(elem)
+  fs['___graceful-fs_queue'].push(elem)
   retry()
 }
 
@@ -380,29 +377,28 @@ var retryTimer
 // reset the startTime and lastTime to now
 // this resets the start of the 60 second overall timeout as well as the
 // delay between attempts so that we'll retry these jobs sooner
-function resetQueue () {
+function resetQueue() {
   var now = Date.now()
-  for (var i = 0; i < fs[gracefulQueue].length; ++i) {
+  for (var i = 0; i < fs['___graceful-fs_queue'].length; ++i) {
     // entries that are only a length of 2 are from an older version, don't
     // bother modifying those since they'll be retried anyway.
-    if (fs[gracefulQueue][i].length > 2) {
-      fs[gracefulQueue][i][3] = now // startTime
-      fs[gracefulQueue][i][4] = now // lastTime
+    if (fs['___graceful-fs_queue'][i].length > 2) {
+      fs['___graceful-fs_queue'][i][3] = now // startTime
+      fs['___graceful-fs_queue'][i][4] = now // lastTime
     }
   }
   // call retry to make sure we're actively processing the queue
   retry()
 }
 
-function retry () {
+function retry() {
   // clear the timer and remove it to help prevent unintended concurrency
   clearTimeout(retryTimer)
   retryTimer = undefined
 
-  if (fs[gracefulQueue].length === 0)
-    return
+  if (fs['___graceful-fs_queue'].length === 0) return
 
-  var elem = fs[gracefulQueue].shift()
+  var elem = fs['___graceful-fs_queue'].shift()
   var fn = elem[0]
   var args = elem[1]
   // these items may be unset if they were added by an older graceful-fs
@@ -419,8 +415,7 @@ function retry () {
     // it's been more than 60 seconds total, bail now
     debug('TIMEOUT', fn.name, args)
     var cb = args.pop()
-    if (typeof cb === 'function')
-      cb.call(null, err)
+    if (typeof cb === 'function') cb.call(null, err)
   } else {
     // the amount of time between the last attempt and right now
     var sinceAttempt = Date.now() - lastTime
@@ -437,7 +432,7 @@ function retry () {
     } else {
       // if we can't do this job yet, push it to the end of the queue
       // and let the next iteration check again
-      fs[gracefulQueue].push(elem)
+      fs['___graceful-fs_queue'].push(elem)
     }
   }
 
